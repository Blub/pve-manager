#!/usr/bin/perl -T

# Note: In theory, all this can be done by 'pveproxy' daemon. But som API call
# still have blocking code, so we use a separate daemon to avoid that the console
# get blocked.

$ENV{'PATH'} = '/sbin:/bin:/usr/sbin:/usr/bin';

delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};  

use strict;
use warnings;
use English;

use PVE::SafeSyslog;
use PVE::Daemon;
use PVE::APIDaemon;
use PVE::API2;

use base qw(PVE::Daemon);

my $cmdline = [$0, @ARGV];

my %daemon_options = (restart_on_error => 5, stop_wait_time => 15, run_dir => '/var/run/pveproxy');

my $daemon = __PACKAGE__->new('spiceproxy', $cmdline, %daemon_options);

my $gid = getgrnam('www-data') || die "getgrnam failed - $!\n";
POSIX::setgid($gid) || die "setgid $gid failed - $!\n";
$EGID = "$gid $gid"; # this calls setgroups
my $uid = getpwnam('www-data') || die "getpwnam failed - $!\n";
POSIX::setuid($uid) || die "setuid $uid failed - $!\n";

# just to be sure
die "detected strange uid/gid\n" if !($UID == $uid && $EUID == $uid && $GID eq "$gid $gid" && $EGID eq "$gid $gid");

sub init {
    my ($self) = @_;

    # we use same ALLOW/DENY/POLICY as pveproxy
    my $proxyconf = PVE::APIDaemon::read_proxy_config();

    $self->{api_daemon} = PVE::APIDaemon->new(
	base_handler_class => 'PVE::API2',
	port => 3128, 
	keep_alive => 0,
	max_workers => 1, # do we need more?
	max_conn => 500,
	lockfile => "/var/lock/spiceproxy.lck",
	debug => $self->{debug},
	spiceproxy => 1,
	logfile => '/var/log/pveproxy/access.log',
	allow_from => $proxyconf->{ALLOW_FROM},
	deny_from => $proxyconf->{DENY_FROM},
	policy => $proxyconf->{POLICY},
    );
}

sub shutdown {
    my ($self) = @_;

    $self->exit_daemon(0);
}

sub run {
    my ($self) = @_;
  
    $self->{api_daemon}->start_server();
}

$daemon->register_start_command(__PACKAGE__);
$daemon->register_restart_command(__PACKAGE__, 0);
$daemon->register_reload_command(__PACKAGE__);
$daemon->register_stop_command(__PACKAGE__);
$daemon->register_status_command(__PACKAGE__);

my $cmddef = {
    start => [ __PACKAGE__, 'start', []],
    restart => [ __PACKAGE__, 'restart', []],
    reload => [ __PACKAGE__, 'reload', []],
    stop => [ __PACKAGE__, 'stop', []],
    status => [ __PACKAGE__, 'status', [], undef, sub { print shift . "\n";} ],
};

my $cmd = shift;

PVE::CLIHandler::handle_cmd($cmddef, $0, $cmd, \@ARGV, undef, $0);

exit (0);

__END__

=head1 NAME
                                          
spiceproxy - SPICE proxy server for Proxmox VE

=head1 SYNOPSIS

=include synopsis

=head1 DESCRIPTION

SPICE proxy server for Proxmox VE. Listens on port 3128.

=head1 Host based access control

It is possible to configure apache2 like access control lists. Values are read 
from file /etc/default/pveproxy (see 'pveproxy' for details).

=head1 FILES

 /etc/default/pveproxy

=include pve_copyright
